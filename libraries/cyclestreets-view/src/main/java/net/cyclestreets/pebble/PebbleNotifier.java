package net.cyclestreets.pebble;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.util.Log;

import com.getpebble.android.kit.PebbleKit;
import com.getpebble.android.kit.util.PebbleDictionary;

import net.cyclestreets.routing.Segment;

import java.util.LinkedList;
import java.util.Queue;
import java.util.UUID;

/**
 * Created by jsinglet on 20/02/2015.
 */
public class PebbleNotifier {

  private static final String BROADCAST_PEBBLE_MESSAGE=PebbleNotifier.class.getName() + ".message";
  // UUID generated by pebble app creation
  private static final UUID APP_UID = UUID.fromString("7b99db93-2503-4d6e-a503-67353132a90c");
  public static final String TAG = "CS_PEBBLE";
  private final Context context;
  private boolean isConnected;
  private int transactionId = 1;



  private boolean isSending = false;


  private Queue<PebbleDictionary> messageQueue = new LinkedList<PebbleDictionary>();

  private enum PebbleMessages {
    turn(0),
    street(1),
    distance(2),
    running(3),
    instruction(4);

    private final int key;

    PebbleMessages(int key) {
      this.key = key;
    }

    public int getKey() {
      return key;
    }

  }

  public PebbleNotifier(Context context) {
    this.isConnected = PebbleKit.isWatchConnected(context);
    listenForConnections(context);
    setupHandler(context);
    this.context = context;
  }

  private void setupHandler(Context context) {
    BroadcastReceiver receiver = new BroadcastReceiver() {

      @Override
      public void onReceive(Context context, Intent intent) {
        if (isSending() == false && !messageQueue.isEmpty()) {
          setSending(true);
          PebbleDictionary dictionary = messageQueue.remove();
          int txnId = nextTransactionId();
          Log.d(TAG, "sending message " + txnId);
          PebbleKit.sendDataToPebbleWithTransactionId(context, APP_UID, dictionary, txnId);
        }
      }
    };

    context.registerReceiver(receiver, new IntentFilter(BROADCAST_PEBBLE_MESSAGE));
  }

  private void listenForConnections(Context context) {
    PebbleKit.registerPebbleConnectedReceiver(context, new BroadcastReceiver() {

      @Override
      public void onReceive(Context context, Intent intent) {
        isConnected = true;
      }

    });

    PebbleKit.registerPebbleDisconnectedReceiver(context, new BroadcastReceiver() {

      @Override
      public void onReceive(Context context, Intent intent) {
        isConnected = false;
      }

    });

    Log.d(TAG, "Registering ack/nack receivers");

    PebbleKit.registerReceivedAckHandler(context, new PebbleKit.PebbleAckReceiver(APP_UID) {

      @Override
      public void receiveAck(Context context, int transactionId) {
        Log.i(TAG, "Received ack for transaction " + transactionId);
        setSending(false);
        context.sendBroadcast(new Intent(BROADCAST_PEBBLE_MESSAGE));
      }

    });

    PebbleKit.registerReceivedNackHandler(context, new PebbleKit.PebbleNackReceiver(APP_UID) {

      @Override
      public void receiveNack(Context context, int transactionId) {
        Log.i(TAG, "Received nack for transaction " + transactionId);
        setSending(false);
        context.sendBroadcast(new Intent(BROADCAST_PEBBLE_MESSAGE));
      }

    });

  }

  private synchronized void addMessage(PebbleDictionary dictionary) {
    messageQueue.add(dictionary);
  }


  public boolean isConnected() {
    return isConnected;
  }


  public void notifyNextSegment(Segment segment) {
    notify(segment);
  }

  public void notifyStopped() {
    Log.d(TAG, "Stopping App");
    if (isConnected()) {
      PebbleKit.closeAppOnPebble(this.context, APP_UID);
    }
  }

  public void notifyStart(Segment segment) {
    Log.d(TAG, "Starting App");
    messageQueue.clear();
    if (isConnected()) {
      PebbleKit.startAppOnPebble(this.context, APP_UID);
    }
  }

  public void notify(Segment seg) {
    if (isConnected()) {
      PebbleDictionary dictionary = new PebbleDictionary();
      dictionary.addString(PebbleMessages.turn.getKey(), seg.turn());
      dictionary.addString(PebbleMessages.street.getKey(), seg.street());
      dictionary.addString(PebbleMessages.running.getKey(), seg.runningDistance());
      dictionary.addString(PebbleMessages.distance.getKey(), seg.distance());
      dictionary.addString(PebbleMessages.instruction.getKey(), seg.toString());

      Log.i(TAG, "Notifying " + seg.turn() + " into " + seg.street());
      messageQueue.add(dictionary);
      context.sendBroadcast(new Intent(BROADCAST_PEBBLE_MESSAGE));
    }
  }

  private int nextTransactionId() {
    return this.transactionId++;
  }

  public synchronized boolean isSending() {
    return isSending;
  }

  public synchronized void setSending(boolean isSending) {
    this.isSending = isSending;
  }

}
